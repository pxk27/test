# This workflow runs after the CI tests when a user opens, edits, synchronizes,
# or marks a pull request as ready for review. These tests must pass before a
# pull request can be merged.
name: CI Tests

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]

concurrency:
  # We only want one instance of this workflow to run at a time for each PR.
  # This ensures the workflow is cancelled if a new one for the same PR is
  # started.
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:

  get-date:
    # We use the date to label caches. A cache is a "hit" if the request binary
    # and date are the same as what is stored in the cache.
    # This essentially means the first job to run on a given day for a given
    # binary will always be a "miss" and will have to build the binary then
    # upload it as that day's binary to upload. While this isn't the most
    # efficient way to do this, the alternative was to take a hash of the
    # `src` directory contents and use it as a hash. We found there to be bugs
    # with the hash function where this task would timeout. This approach is
    # simple, works, and still provides some level of caching.
    if: github.event.pull_request.draft == false

    name: Current Date
    runs-on: ubuntu-latest
    steps:
    - name: Get the current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
    outputs:
      date: ${{ steps.date.outputs.date }}

  unittests-all-opt:
    # This job runs the unittests in build/ALL/unittests.opt.
    if: github.event.pull_request.draft == false

    name: Unittests (ALL-opt)
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs: get-date
    timeout-minutes: 60

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    # Restore the cache if available. As this just builds the unittests
    # we only obtain the cache and do not provide it if it is not
    # available.
    - name: Cache build/ALL
      uses: actions/cache/restore@v4
      with:
        path: build/ALL
        key: testlib-build-all-${{ needs.get-date.outputs.date }}
        restore-keys: |
          testlib-build-all

    - name: Unittests (ALL-opt)
      run: scons --no-compress-debug build/ALL/unittests.opt -j $(nproc)


  testlib-quick-matrix:
    # This job generates a matrix of gem5 build targets for the testlib quick
    # tests as well as a matrix of test directories containing the tests.
    if: github.event.pull_request.draft == false

    name: Testlib Quick Matrix
    runs-on: ubuntu-latest
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs: get-date

    steps:

    - name: Checkout
      uses: actions/checkout@v4

      # Gets all the tests directories in the tests/gem5 directory.
    - name: Get the target dirs for testlib tests
      working-directory: ${{ github.workspace }}/tests
      id: dir-matrix
      run: |
        echo "test-dirs-matrix=\
          $(find gem5/* -type d -maxdepth 0 | jq -ncR '[inputs]')" \
          >>$GITHUB_OUTPUT

      # Returns, as a list, all the build targets for the testlib quick tests.
    - name: Get gem5 build targets for testlib tests
      working-directory: ${{ github.workspace }}/tests
      id: build-matrix
      run: |
        echo "build-matrix=\
          $(./main.py list --build-targets -q | jq -ncR '[inputs]')" \
          >>$GITHUB_OUTPUT

    outputs:
      builds: ${{ steps.build-matrix.outputs.build-matrix }}
      test-dirs: ${{ steps.dir-matrix.outputs.test-dirs-matrix }}

  clang-fast-compilation:
    # gem5 binaries built in `quick-gem5-builds` always use GCC.
    # Clang is more strict than GCC. This job checks that gem5 compiles
    # with Clang. It compiles build/ALL/gem5.fast to maximize the chance
    # for a compilation error to be exposed.
    if: github.event.pull_request.draft == false

    name: Clang Compilation (ALL-fast)
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/clang-version-18:latest
    timeout-minutes: 90

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Clang Compilation
      run: scons build/ALL/gem5.fast -j $(nproc)

  testlib-quick-gem5-builds:
    # This job builds gem5 for all build targets in the matrix generated by
    # the testlib-quick-matrix job.
    if: github.event.pull_request.draft == false

    name: Testlib Quick gem5 Builds
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs: testlib-quick-matrix

    strategy:
      matrix:
        build: ${{ fromJson(needs.testlib-quick-matrix.outputs.builds) }}

    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Cache build/ALL
      uses: actions/cache/restore@v4
      if: ${{ endsWith(matrix.build, 'build/ALL/gem5.opt') }}
      with:
        path: build/ALL
        key: testlib-build-all-${{ needs.get-date.outputs.date }}
        restore-keys: |
          testlib-build-all

    - name: Build ${{ matrix.build }}
      run: scons --no-compress-debug ${{ matrix.build }} -j $(nproc)

    - name: Upload ${{ matrix.build }} as an artifact
      uses: actions/upload-artifact@v4
      with:
        # There is some sanitization of the build-target to make it a valid.
        # We replace all '/' and '.' with '-'.
        name: |
          ci-tests-${{ github.run_number }}-testlib-build-\
            $(echo '${{ matrix.build-target }}' \
            | sed 's/\//-/g' | sed 's/\./-/g')
        working-directory: ${{ github.workspace }}
        path: '*./build/*/gem5.opt'

  testlib-quick-execution:
    # This job runs the testlib quick tests.
    if: github.event.pull_request.draft == false

    name: TestLib Quick Tests
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs:
    - testlib-quick-matrix
    - testlib-quick-gem5-builds
    timeout-minutes: 360 # 6 hours

    strategy:
      fail-fast: false
      matrix:
        test-dir: ${{ fromJson(needs.testlib-quick-matrix.outputs.test-dirs) }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

      # Download all the gem5 binaries needed by the quick tests.
    - name: Download gem5 binaries
      uses: actions/download-artifact@v4
      with:
        working-directory: ${{ github.workspace }}
        pattern: ci-tests-${{ github.run_number }}-testlib-build-*
        merge-multiple: true

      # Check that the gem5.opt artifact exists and is executable.
    - name: Chmod gem5.{opt,debug,fast} to be executable
      run: |
        find . -name "gem5.opt" | xargs -r chmod u+x
        find . -name "gem5.debug" | xargs -r chmod u+x
        find . -name "gem5.fast" | xargs -r chmod u+x

      # Run the testlib quick tests in the given directory.
    - name: Run "tests/${{ matrix.test-dir }}" TestLib quick tests
      id: run-tests
      working-directory: ${{ github.workspace }}/tests
      run: ./main.py run --skip-build -vvv ${{ matrix.test-dir }}

    # Get the basename of the matrix.test-dir path (to name the artifact).
    - name: Sanitize test-dir for artifact name
      id: test-dir-base
      if: success() || failure()
      run: echo "base=$(basename ${{ matrix.test-dir }})" >> $GITHUB_OUTPUT

      # Upload the tests/testing-results directory as an artifact.
    - name: Upload Results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: |
          ci-tests-run-${{ github.run_number }}-\
          testlib-quick-${{ steps.test-dir-base.outputs.base }}-\
          attempt-${{ github.run_attempt }}-\
          status-${{ steps.run-tests.outcome }}
        path: tests/testing-results

  pyunit:
    # This job runs the pyunit tests.
    if: github.event.pull_request.draft == false

    name: Pyunit Tests
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/ubuntu-24.04_all-dependencies:latest
    needs: testlib-quick-gem5-builds
    timeout-minutes: 30

    steps:

      # Checkout the repository then download the builds.
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download gem5 binaries
      uses: actions/download-artifact@v4
      with:
        pattern: ci-tests-${{ github.run_number }}-testlib-build-*
        merge-multiple: true

      # Check that the gem5 binaries exist and are executable.
    - name: Chmod gem5.{opt,debug,fast} to be executable
      run: |
        find . -name "gem5.opt" | xargs -r chmod u+x
        find . -name "gem5.debug" | xargs -r chmod u+x
        find . -name "gem5.fast" | xargs -r chmod u+x

      # Run the pyunit tests.
    - name: Run The pyunit tests
      working-directory: ${{ github.workspace }}/tests
      run: ./main.py run --skip-build -vvv pyunit

      # Upload the tests/testing-results directory as an artifact.
    - name: Upload pyunit test results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: |
          ci-tests-run-${{ github.run_number }}-\
          pyunit-\
          attempt-${{ github.run_attempt }}-\
          status-${{ steps.run-tests.outcome }}
        path: tests/testing-results

  gpu-tests:
    # This job runs the GPU tests.
    if: github.event.pull_request.draft == false

    name: GPU Tests
    runs-on: [self-hosted, linux, x64]
    container: ghcr.io/gem5/gcn-gpu:latest
    timeout-minutes: 180

    steps:
    - uses: actions/checkout@v4

    - name: Cache build/VEGA_X86
      uses: actions/cache/restore@v4
      with:
        path: build/VEGA_X86
        key: testlib-build-vega-${{ needs.get-date.outputs.date }}
        restore-keys: testlib-build-vega

    - name: Build VEGA_X86/gem5.opt
      run: scons build/VEGA_X86/gem5.opt -j`nproc`

    - name: Run Testlib GPU Tests
      working-directory: ${{ github.workspace }}/tests
      run: ./main.py run  --skip-build -vvv -t $(nproc) --host gcn_gpu gem5/gpu

    - name: Upload results
      if: success() || failure()
      uses: actions/upload-artifact@v4.0.0
      with:
        name: |
          ci-tests-run-${{ github.run_number }}-attempt-\
          ${{ github.run_attempt }}-gpu-status-\
          ${{ steps.run-tests.outcome }}-output
        path: tests/testing-results

  ci-tests:
    # This job is a status check for the pull request. If this job passes the
    # pull request can be merged
    name: CI Workflow Confirmation
    runs-on: ubuntu-latest
    needs:
    - testlib-quick-execution
    - pyunit
    - clang-fast-compilation
    - unittests-all-opt
    - gpu-tests

    steps:
    - run: echo "The CI tests have passed."
